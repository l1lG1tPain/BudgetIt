// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–º–∞–π–ª–∏–∫–æ–º)
function animateValue(element, start, end, duration, suffix = '') {
  let startTimestamp = null;
  const step = (timestamp) => {
    if (!startTimestamp) startTimestamp = timestamp;
    const progress = Math.min((timestamp - startTimestamp) / duration, 1);
    let currentVal = Math.floor(progress * (end - start) + start);
    element.textContent = formatNumber(currentVal) + (progress === 1 && suffix ? ` ${suffix}` : '');
    if (progress < 1) {
      window.requestAnimationFrame(step);
    }
  };
  window.requestAnimationFrame(step);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let budgets = [];
let currentBudgetIndex = 0;
let productNames = [];

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
function openModal(id) {
  console.log('openModal called for:', id);
  // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ bottom-sheet
  if (id === 'settings-page') {
    closeBottomSheets();
  } else if (document.getElementById(id).classList.contains('bottom-sheet')) {
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π bottom-sheet, –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    closeBottomSheets(id);
  }
  document.getElementById(id).classList.remove('hidden');
}

function closeBottomSheets(exceptId) {
  const sheets = document.querySelectorAll('.bottom-sheet');
  sheets.forEach(sheet => {
    if (!exceptId || sheet.id !== exceptId) {
      sheet.classList.add('hidden');
    }
  });
}

function closeModal(id) {
  console.log('closeModal called for:', id);
  document.getElementById(id).classList.add('hidden');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ DOM
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOMContentLoaded -> Start initialization.');

  // –ü—Ä–æ–±—É–µ–º —Å—á–∏—Ç–∞—Ç—å –∏–∑ localStorage
  const localData = localStorage.getItem('budgets');
  if (localData) {
    try {
      budgets = JSON.parse(localData);
    } catch(e) {
      console.log('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º budgets.');
      budgets = [];
    }
  }
  currentBudgetIndex = localStorage.getItem('currentBudgetIndex');
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –±—é–¥–∂–µ—Ç–æ–≤, –∑–∞–∫—Ä—ã–≤–∞–µ–º ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º ¬´–î–æ–±–∞–≤–∏—Ç—å –±—é–¥–∂–µ—Ç¬ª
  if (!Array.isArray(budgets) || budgets.length === 0) {
    console.log('No budgets found -> Forcing close settings & open budget-modal.');
    closeModal('settings-page'); 
    budgets = [];
    localStorage.removeItem('budgets');
    localStorage.removeItem('currentBudgetIndex');
    openModal('budget-modal');
  } else {
    console.log('Budgets found -> length:', budgets.length);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º currentBudgetIndex
    if (currentBudgetIndex === null || isNaN(currentBudgetIndex)) {
      currentBudgetIndex = 0;
      localStorage.setItem('currentBudgetIndex', currentBudgetIndex);
    } else {
      currentBudgetIndex = parseInt(currentBudgetIndex, 10);
    }
    updateHeader();
    updateUI();
  }

  attachEventListeners();
  applyInputRestrictions();

  console.log('DOMContentLoaded -> Initialization finished.');
});

// ===========================
// –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –®–ê–ü–ö–ò –ò UI
// ===========================
function updateHeader() {
  const headerEl = document.getElementById('current-budget');
  if (budgets[currentBudgetIndex]) {
    headerEl.textContent = budgets[currentBudgetIndex].name;
  } else {
    headerEl.textContent = 'BudgetIt';
  }
}

// ==============================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –≠–ú–û–î–ñ–ò
// ==============================
function getBudgetEmoji(value) {
  if (value < -10_000_000) return "üíÄüíÄüíÄ"; // –ü–æ–ª–Ω—ã–π –±–∞–Ω–∫—Ä–æ—Ç
  if (value < 0) return "ü•∂üìâ";           // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫—Ä–∏–∑–∏—Å
  if (value < 1_000_000) return "üêü";     // –ú–∞–ª–µ–Ω—å–∫–∏–π –±—é–¥–∂–µ—Ç
  if (value < 10_000_000) return "ü¶Ä";    // –°—Ä–µ–¥–Ω–∏–π –±—é–¥–∂–µ—Ç
  if (value < 15_000_000) return "üêô";
  if (value < 25_000_000) return "üê¨";
  if (value < 40_000_000) return "ü¶à";
  return "üêã";                            // –¢–æ–ø–æ–≤—ã–π –±—é–¥–∂–µ—Ç
}

function getIncomeEmoji(value) {
  if (value < 1_000_000) return "ü§îüí∏";
  if (value < 10_000_000) return "üòäüí≤";
  if (value < 50_000_000) return "üòéüíµ";
  return "üè¶üí∞";
}

function getExpenseEmoji(value) {
  if (value < 500_000) return "ü§èüíµ";
  if (value < 1_000_000) return "üò¨üõí";
  if (value < 10_000_000) return "ü§Øüí∏";
  return "üöÄüî•üí≥";
}

function getDebtEmoji(value) {
  if (value < 1_000_000) return "üòÖüí≥";
  if (value < 10_000_000) return "üòìüìâ";
  return "üÜòüíÄ";
}

function getDepositEmoji(value) {
  if (value < 1_000_000) return "üêñüí∞";
  if (value < 10_000_000) return "üè¶üìà";
  return "üíéüíé";
}

function updateSelectedCategory() {
  const select = document.getElementById("expense-category");
  const selectedOption = select.options[select.selectedIndex].text;
  select.setAttribute("data-display", selectedOption);
}

// –í—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
document.addEventListener("DOMContentLoaded", updateSelectedCategory);


function markDebtAsPaid(debtId) {
  const budget = budgets[currentBudgetIndex];
  if (!budget) return;

  const debt = budget.transactions.find(t => t.id === debtId && t.type === 'debt');
  if (!debt) {
      console.error("–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
  }

  debt.paid = true;
  debt.paidDate = new Date().toISOString(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É

  saveBudgets();  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  updateUI();     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

  console.log("–î–æ–ª–≥ –æ–ø–ª–∞—á–µ–Ω:", debt);
}


// ==============================
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
// ==============================
let transactionFilter = 'all'; // 'all' ‚Äì –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É

// ==============================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø UPDATEUI
// ==============================
function updateUI() {
  console.log('updateUI called.');
  const budget = budgets[currentBudgetIndex];
  if (!budget) return;

  const transactions = budget.transactions || [];
  const monthFilter = document.getElementById('month-filter-input').getAttribute('data-value') || 'all';

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É (–¥–æ–ª–≥–∏ –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º)
  let filtered = transactions.filter(t => {
      if (t.type === 'debt') return true; 
      if (monthFilter === 'all') return true;
      const tMonth = new Date(t.date).toISOString().slice(5, 7);
      return tMonth === monthFilter;
  });

  // –ü–æ–¥—Å—á—ë—Ç—ã —Å—É–º–º
  const totalIncome = filtered.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);
  const totalExpense = filtered.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
  const totalDeposit = filtered.filter(t => t.type === 'deposit')
      .reduce((sum, t) => sum + (t.status === '‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' ? t.amount : -t.amount), 0);
  const totalDebt = transactions.filter(t => t.type === 'debt' && !t.paid).reduce((sum, t) => sum + t.amount, 0);

  const overallBudget = totalIncome - totalExpense;

  // ‚úÖ **–î–æ–±–∞–≤–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏ –≤ —Ä–∞—Å—Ö–æ–¥—ã**
  const paidDebts = transactions
    .filter(t => t.type === 'debt' && t.paid && t.paidDate) // –¢–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏ —Å –¥–∞—Ç–æ–π
    .filter(t => {
        if (monthFilter === 'all') return true; // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä "–≤—Å–µ", —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏
        const paidMonth = new Date(t.paidDate).toISOString().slice(5, 7);
        return paidMonth === monthFilter; // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ª–≥–∏, –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ
    })
    .reduce((sum, t) => sum + t.amount, 0);

  console.log("–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏, —É—á—Ç–µ–Ω–Ω—ã–µ –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö:", paidDebts);

// üìå **–†–∞—Å—Ö–æ–¥—ã = –û–±—ã—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã + –°–Ω—è—Ç–∏–µ –≤–∫–ª–∞–¥–æ–≤ + –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏ + –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–≤**
  const depositWithdrawals = filtered
    .filter(t => t.type === 'deposit' && t.status === '‚ûñ –°–Ω—è—Ç–∏–µ')
    .reduce((sum, t) => sum -t.amount, 0);

  // ‚úÖ **–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–≤ –≤ —Ä–∞—Å—Ö–æ–¥**
  const depositAdditions = filtered
    .filter(t => t.type === 'deposit' && t.status === '‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
    .reduce((sum, t) => sum + t.amount, 0);

  const expenseBlockValue = totalExpense + depositWithdrawals + paidDebts + depositAdditions;

  console.log("–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ (—Å —É—á–µ—Ç–æ–º –≤–∫–ª–∞–¥–æ–≤ –∏ –¥–æ–ª–≥–æ–≤):", expenseBlockValue);



  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–ª–æ–∫–æ–≤
  const budgetEl  = document.querySelector('#block-budget .block-value');
  const incomeEl  = document.querySelector('#block-income .block-value');
  const expenseEl = document.querySelector('#block-expense .block-value');
  const depositEl = document.querySelector('#block-deposit .block-value');
  const debtEl    = document.querySelector('#block-debt .block-value');

  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —ç–º–æ–¥–∂–∏
  const budgetEmojiEl  = document.querySelector('#block-budget .emoji');
  const expenseEmojiEl = document.querySelector('#block-expense .emoji');
  const debtEmojiEl    = document.querySelector('#block-debt .emoji');

  const incomeEmojiEl  = document.querySelector('#block-income .emoji');
  const depositEmojiEl = document.querySelector('#block-deposit .emoji');

  // –ü–∞—Ä—Å–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
  const oldBudget  = parseInt(budgetEl.textContent.replace(/\D/g, '')) || 0;
  const oldIncome  = parseInt(incomeEl.textContent.replace(/\D/g, '')) || 0;
  const oldExpense = parseInt(expenseEl.textContent.replace(/\D/g, '')) || 0;
  const oldDeposit = parseInt(depositEl.textContent.replace(/\D/g, '')) || 0;
  const oldDebt    = parseInt(debtEl.textContent.replace(/\D/g, '')) || 0;

  // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  animateValue(budgetEl,  oldBudget,  overallBudget,    800);
  animateValue(incomeEl,  oldIncome,  totalIncome,      800);
  animateValue(expenseEl, oldExpense, expenseBlockValue,800);
  animateValue(depositEl, oldDeposit, totalDeposit,     800);
  animateValue(debtEl,    oldDebt,    totalDebt,        800);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ–¥–∂–∏
  budgetEmojiEl.textContent  = getBudgetEmoji(overallBudget);
  if (incomeEmojiEl)  incomeEmojiEl.textContent  = getIncomeEmoji(totalIncome);
  expenseEmojiEl.textContent = getExpenseEmoji(expenseBlockValue);
  debtEmojiEl.textContent    = getDebtEmoji(totalDebt);
  if (depositEmojiEl) depositEmojiEl.textContent = getDepositEmoji(totalDeposit);

  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  let finalFiltered = filtered.filter(t => {
      if (transactionFilter !== 'all' && t.type !== transactionFilter) return false;
      return true;
  });
  updateTransactionList(finalFiltered);

  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –∫ –±–ª–æ–∫–∞–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
  document.getElementById('block-budget').addEventListener('click', () => {
      transactionFilter = 'all';
      updateUI();
  });
  document.getElementById('block-income').addEventListener('click', () => {
      transactionFilter = 'income';
      updateUI();
  });
  document.getElementById('block-expense').addEventListener('click', () => {
      transactionFilter = 'expense';
      updateUI();
  });
  document.getElementById('block-deposit').addEventListener('click', () => {
      transactionFilter = 'deposit';
      updateUI();
  });
  document.getElementById('block-debt').addEventListener('click', () => {
      transactionFilter = 'debt';
      updateUI();
  });
}





// –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function updateTransactionList(transactions) {
  console.log('updateTransactionList called, count =', transactions.length);
  const list = document.getElementById('transaction-list');
  list.innerHTML = '';

  transactions.sort((a, b) => new Date(b.date) - new Date(a.date));
  transactions.forEach(t => {
      const li = document.createElement('li');
      li.style.borderLeftColor = getTypeColor(t.type);
      li.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <div><strong>${getTypeName(t.type)}: </strong>${t.category || t.name}</div>
        <div style="font-weight: bold;">${formatNumber(t.amount)}</div>
      </div>
      <div style="font-size: 0.8em; color: gray; text-align: right;">${formatDate(t.date)}</div>
      ${t.type === 'debt' ? (t.paid ? `<span style="color: green; font-weight: bold;">‚úÖ –û–ø–ª–∞—á–µ–Ω–æ</span>` : `<button class="pay-debt" data-id="${t.id}">–û–ø–ª–∞—Ç–∏—Ç—å</button>`) : ""}

      `;


      li.addEventListener('click', () => openTransactionDetail(t));
      list.appendChild(li);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–û–ø–ª–∞—á–µ–Ω–æ"
  document.querySelectorAll('.pay-debt').forEach(button => {
      button.addEventListener('click', (event) => {
          event.stopPropagation(); // –ß—Ç–æ–±—ã –∫–ª–∏–∫ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª –¥–µ—Ç–∞–ª–∏
          const debtId = parseInt(event.target.dataset.id, 10);
          markDebtAsPaid(debtId);
      });
  });
}


// ===========================
// –§–£–ù–ö–¶–ò–ò –û–¢–ö–†–´–¢–ò–Ø –î–ï–¢–ê–õ–ï–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
// ===========================
function openTransactionDetail(transaction) {
  document.getElementById('detail-type').textContent = getTypeName(transaction.type);
  document.getElementById('detail-name').textContent = transaction.category || transaction.name;
  document.getElementById('detail-amount').textContent = '–°—É–º–º–∞: ' + formatNumber(transaction.amount);
  document.getElementById('detail-date').textContent = '–î–∞—Ç–∞: ' + formatDate(transaction.date);

  document.getElementById('delete-transaction').onclick = () => {
    deleteTransaction(transaction.id);
    closeModal('transaction-detail-sheet');
  };

  // –°—Ç–∞—Ç—É—Å –≤–∫–ª–∞–¥–æ–≤
  const detailStatus = document.getElementById('detail-status');
  if (transaction.type === 'deposit') {
    detailStatus.classList.remove('hidden');
    detailStatus.textContent = '–°—Ç–∞—Ç—É—Å: ' + transaction.status;
  } else {
    detailStatus.classList.add('hidden');
  }

  // –¢–æ–≤–∞—Ä—ã
  const prodDiv = document.getElementById('detail-products');
  if (transaction.type === 'expense' && transaction.products && transaction.products.length) {
    prodDiv.classList.remove('hidden');
    prodDiv.innerHTML = '<strong>–¢–æ–≤–∞—Ä—ã:</strong><br>' +
      transaction.products.map(p => `${p.name} (${p.quantity} x ${formatNumber(p.price)})`).join('<br>');
  } else {
    prodDiv.classList.add('hidden');
  }

  // –î–æ–ª–≥
  const payDebtBtn = document.getElementById('pay-debt');
  if (transaction.type === 'debt' && !transaction.paid) {
      payDebtBtn.classList.remove('hidden');
      payDebtBtn.onclick = () => markDebtAsPaid(transaction.id);
  } else {
      payDebtBtn.classList.add('hidden');
  }


  openModal('transaction-detail-sheet');
}

function payDebt(transaction) {
  transaction.paid = true;
  saveBudgets();
  updateUI();
  closeModal('transaction-detail-sheet');
}

function deleteTransaction(transactionId) {
  const transactions = budgets[currentBudgetIndex].transactions;
  const index = transactions.findIndex(t => t.id === transactionId);
  if (index !== -1) {
    transactions.splice(index, 1);
    saveBudgets();
    updateUI();
  }
}

// ===========================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
// ===========================
function attachEventListeners() {
  console.log('attachEventListeners called.');

  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
  document.getElementById('budget-form').addEventListener('submit', e => {
    e.preventDefault();
    const name = e.target['budget-name'].value.trim();
    console.log('budget-form submitted with name:', name);
    if (name && /^[A-Za-z–ê-–Ø–∞-—è0-9+\-/\s]+$/.test(name)) {
      budgets.push({ name, transactions: [] });
      currentBudgetIndex = budgets.length - 1;
      saveBudgets();
      updateHeader();
      updateUI();
      closeModal('budget-modal');
    } else {
      alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞! (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, +, -, /, –ø—Ä–æ–±–µ–ª)');
    }
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
  document.getElementById('current-budget').addEventListener('click', () => {
    console.log('current-budget clicked -> open budget-switch-sheet');
    populateBudgetList();
    openModal('budget-switch-sheet');
  });
  document.getElementById('close-budget-sheet').addEventListener('click', () => {
    closeModal('budget-switch-sheet');
  });
  document.querySelector('#budget-switch-sheet .budget-list').addEventListener('click', e => {
    if (e.target.dataset.index !== undefined) {
      console.log('Switching to budget index:', e.target.dataset.index);
      currentBudgetIndex = parseInt(e.target.dataset.index, 10);
      saveBudgets();
      updateHeader();
      updateUI();
      closeModal('budget-switch-sheet');
    }
  });
  document.getElementById('add-budget-btn').addEventListener('click', () => {
    const newName = document.getElementById('new-budget-name').value.trim();
    console.log('add-budget-btn clicked, newName =', newName);
    if (newName && /^[A-Za-z–ê-–Ø–∞-—è0-9+\-/\s]+$/.test(newName)) {
      budgets.push({ name: newName, transactions: [] });
      saveBudgets();
      populateBudgetList();
      document.getElementById('new-budget-name').value = '';
    } else {
      alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞!');
    }
  });

  // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É
  document.getElementById('month-filter-input').addEventListener('click', function(){
    document.getElementById('month-filter-dropdown').classList.toggle('hidden');
  });
  document.querySelectorAll('#month-filter-dropdown li').forEach(li => {
    li.addEventListener('click', function(){
      const value = this.getAttribute('data-value');
      document.getElementById('month-filter-input').value = this.textContent;
      document.getElementById('month-filter-input').setAttribute('data-value', value);
      document.getElementById('month-filter-dropdown').classList.add('hidden');
      updateUI(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –Ω–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
    });
  });

  // –ö–Ω–æ–ø–∫–∞ + (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
  document.getElementById('add-btn').addEventListener('click', () => {
    const today = new Date().toISOString().split('T')[0];
    ['income-date','expense-date','debt-date','deposit-date'].forEach(id => {
      document.getElementById(id).value = today;
    });
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî "income" (–î–æ—Ö–æ–¥—ã)
    document.getElementById('transaction-type').value = 'income';
    hideAllForms();
    openForm('income-form'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ä–º—É –¥–æ—Ö–æ–¥–æ–≤
    openModal('transaction-sheet');
  });
  
  // –°–º–µ–Ω–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  document.getElementById('transaction-type').addEventListener('change', e => {
    hideAllForms();
    const type = e.target.value;
    console.log('transaction-type changed to:', type);
    if (type === 'income') openForm('income-form');
    if (type === 'expense') openForm('expense-form');
    if (type === 'debt') openForm('debt-form');
    if (type === 'deposit') openForm('deposit-form');
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  document.querySelectorAll('.close-form').forEach(btn => {
    btn.addEventListener('click', () => {
      console.log('close-form clicked -> close transaction-sheet');
      closeModal('transaction-sheet');
    });
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º
  document.getElementById('income-form').addEventListener('submit', submitIncome);
  document.getElementById('expense-form').addEventListener('submit', submitExpense);
  document.getElementById('debt-form').addEventListener('submit', submitDebt);
  document.getElementById('deposit-form').addEventListener('submit', submitDeposit);

  // –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä (—Ñ–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤)
  document.getElementById('add-product').addEventListener('click', () => {
    console.log('add-product clicked -> create new product-item');
    const container = document.createElement('div');
    container.classList.add('product-item');
    container.innerHTML = `
      <input type="text" class="product-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" maxlength="16" list="product-names-list">
      <input type="tel" class="product-quantity" placeholder="–ö–æ–ª-–≤–æ" required maxlength="3">
      <input type="tel" class="product-price numeric-format" placeholder="–¶–µ–Ω–∞" required maxlength="11" inputmode="numeric">
    `;
    document.getElementById('products-list').appendChild(container);
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  document.getElementById('settings-btn').addEventListener('click', () => {
    console.log('settings-btn clicked -> open settings-page');
    openModal('settings-page');
  });
  document.getElementById('close-settings').addEventListener('click', () => {
    closeModal('settings-page');
  });
  document.getElementById('export-btn').addEventListener('click', exportData);
  document.getElementById('import-file').addEventListener('change', importData);

  // Bottom-sheet —Å –¥–µ—Ç–∞–ª—è–º–∏
  document.getElementById('close-detail').addEventListener('click', () => {
    closeModal('transaction-detail-sheet');
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWA
  let deferredPrompt;
  window.addEventListener('beforeinstallprompt', e => {
    console.log('beforeinstallprompt event triggered.');
    e.preventDefault();
    deferredPrompt = e;
    document.getElementById('install-btn').style.display = 'block';
  });
  document.getElementById('install-btn').addEventListener('click', () => {
    console.log('install-btn clicked -> prompt PWA');
    deferredPrompt.prompt();
    deferredPrompt.userChoice.then(() => {
      deferredPrompt = null;
      document.getElementById('install-btn').style.display = 'none';
    });
  });
}

// ===========================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–†–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
// ===========================
function hideAllForms() {
  console.log('hideAllForms called.');
  document.querySelectorAll('.transaction-form').forEach(form => form.classList.add('hidden'));
}
function openForm(formId) {
  console.log('openForm called for:', formId);
  document.getElementById(formId).classList.remove('hidden');
}

function submitIncome(e) {
  e.preventDefault();
  console.log('submitIncome called.');
  const form = e.target;
  if (!form['income-category'].value) {
    form['income-category'].style.borderColor = 'red';
    return;
  }
  const amount = parseInt(form['income-amount'].value.replace(/\D/g, ''), 10) || 0;
  const transaction = {
    id: Date.now(),
    type: 'income',
    date: form['income-date'].value,
    category: form['income-category'].value,
    amount
  };
  addTransaction(transaction);
  form.reset();
  closeModal('transaction-sheet');
}

function submitExpense(e) {
  e.preventDefault();
  console.log('submitExpense called.');
  const form = e.target;
  if (!form['expense-category'].value) {
    form['expense-category'].style.borderColor = 'red';
    return;
  }
  const products = Array.from(document.querySelectorAll('#products-list .product-item')).map(item => {
    const name = item.querySelector('.product-name').value.trim();
    const quantity = parseInt(item.querySelector('.product-quantity').value, 10) || 0;
    const price = parseInt(item.querySelector('.product-price').value.replace(/\D/g, ''), 10) || 0;
    return { name, quantity, price };
  });
  const totalAmount = products.reduce((sum, p) => sum + (p.quantity * p.price), 0);
  if (totalAmount <= 0) {
    alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö!');
    return;
  }
  const transaction = {
    id: Date.now(),
    type: 'expense',
    date: form['expense-date'].value,
    category: form['expense-category'].value,
    amount: totalAmount,
    products
  };
  addTransaction(transaction);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏
  products.forEach(p => {
    if (p.name && !productNames.includes(p.name)) {
      productNames.push(p.name);
    }
  });
  updateProductDatalist();

  form.reset();
  document.getElementById('products-list').innerHTML = `
  <div class="product-item">
    <input type="text" class="product-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" maxlength="16" list="product-names-list">
    <input type="tel" class="product-quantity" placeholder="–ö–æ–ª-–≤–æ" required maxlength="3">
    <input type="tel" class="product-price numeric-format" placeholder="–¶–µ–Ω–∞" required maxlength="11" inputmode="numeric">
  </div>
  `;

  // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å –∫–ª–∞—Å—Å–æ–º "numeric-format"
  document.querySelectorAll('input.numeric-format').forEach(input => {
    input.addEventListener('input', function() {
      let numericValue = this.value.replace(/\D/g, '');
      this.value = numericValue.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
    });
  });

  closeModal('transaction-sheet');
}

function submitDebt(e) {
  e.preventDefault();
  console.log('submitDebt called.');
  const form = e.target;
  const amount = parseInt(form['debt-amount'].value.replace(/\D/g, ''), 10) || 0;
  const transaction = {
    id: Date.now(),
    type: 'debt',
    date: form['debt-date'].value,
    name: form['debt-name'].value.trim(),
    amount,
    paid: false
  };
  addTransaction(transaction);
  form.reset();
  closeModal('transaction-sheet');
}

function submitDeposit(e) {
  e.preventDefault();
  console.log('submitDeposit called.');
  const form = e.target;
  if (!form['deposit-status'].value) {
    form['deposit-status'].style.borderColor = 'red';
    return;
  }
  const amount = parseInt(form['deposit-amount'].value.replace(/\D/g, ''), 10) || 0;
  const transaction = {
    id: Date.now(),
    type: 'deposit',
    date: form['deposit-date'].value,
    name: form['deposit-name'].value.trim(),
    amount,
    status: form['deposit-status'].value
  };
  addTransaction(transaction);
  form.reset();
  closeModal('transaction-sheet');
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç
function addTransaction(transaction) {
  console.log('addTransaction called:', transaction);
  if (!budgets[currentBudgetIndex].transactions) {
    budgets[currentBudgetIndex].transactions = [];
  }
  budgets[currentBudgetIndex].transactions.push(transaction);
  saveBudgets();
  updateUI();
}

// –ü—Ä–æ—Å–ª—É—à–∫–∞ –≤—Å–µ—Ö –∏–Ω–ø—É—Ç–æ–≤ numeric
document.querySelectorAll('input.numeric-format').forEach(input => {
  input.addEventListener('input', function() {
    // –£–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    let numericValue = this.value.replace(/\D/g, '');
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∫–∞–∂–¥—ã—Ö —Ç—Ä—ë—Ö —Ü–∏—Ñ—Ä (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
    this.value = numericValue.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
  });
});

// ===========================
// –≠–ö–°–ü–û–†–¢/–ò–ú–ü–û–†–¢
// ===========================
function exportData() {
  console.log('exportData called.');
  const dataStr = JSON.stringify(budgets);
  const blob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'budgets.json';
  a.click();
}
function importData(e) {
  console.log('importData called.');
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = () => {
    try {
      budgets = JSON.parse(reader.result);
      currentBudgetIndex = 0;
      saveBudgets();
      updateHeader();
      updateUI();
      alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞!');
    }
  };
  reader.readAsText(file);
}

// ===========================
// –ü–û–õ–ï–ó–ù–´–ï –£–¢–ò–õ–ò–¢–´
// ===========================
function saveBudgets() {
  localStorage.setItem('budgets', JSON.stringify(budgets));
  localStorage.setItem('currentBudgetIndex', currentBudgetIndex);
}
function formatNumber(num) {
  return num.toLocaleString('ru-RU');
}
function formatDate(dateStr) {
  const date = new Date(dateStr);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: '2-digit'
  });
}
function getTypeName(type) {
  const map = { income: '–î–æ—Ö–æ–¥', expense: '–†–∞—Å—Ö–æ–¥', debt: '–î–æ–ª–≥', deposit: '–í–∫–ª–∞–¥' };
  return map[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}
function getTypeColor(type) {
  const rootStyles = getComputedStyle(document.documentElement);

  const map = {
    income: rootStyles.getPropertyValue('--income-color').trim(),
    expense: rootStyles.getPropertyValue('--expense-color').trim(),
    debt: rootStyles.getPropertyValue('--debt-color').trim(),
    deposit: rootStyles.getPropertyValue('--deposit-color').trim()
  };
  return map[type] || 'black';
}
function getBudgetEmoji(value) {
  if(value < 1e6) return 'üêü';
  if(value < 1e7) return 'ü¶Ä';
  if(value >= 1e7 && value < 1.5e7) return 'üêô';
  if(value >= 1.5e7 && value < 2.5e7) return 'üê¨';
  if(value >= 2.5e7 && value < 4e7) return 'ü¶à';
  if(value >= 4e7) return 'üêã';
  return '';
}

// –ê–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
function updateProductDatalist() {
  const dataList = document.getElementById('product-names-list');
  dataList.innerHTML = '';
  productNames.forEach(name => {
    const option = document.createElement('option');
    option.value = name;
    dataList.appendChild(option);
  });
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–≤–æ–¥–∞
function applyInputRestrictions() {
  console.log('applyInputRestrictions called.');
  // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
  document.querySelectorAll('input[type="text"]').forEach(input => {
    input.addEventListener('input', e => {
      e.target.value = e.target.value.replace(/[^A-Za-z–ê-–Ø–∞-—è0-9+\-/\s]/g, '').slice(0,16);
    });
  });
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö
  document.querySelectorAll('input[inputmode="numeric"]').forEach(input => {
    input.addEventListener('input', e => {
      const raw = e.target.value.replace(/\D/g, '');
      e.target.value = raw.replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');
    });
  });
}

// –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –±—é–¥–∂–µ—Ç–æ–≤
function populateBudgetList() {
  console.log('populateBudgetList called.');
  const listDiv = document.querySelector('#budget-switch-sheet .budget-list');
  listDiv.innerHTML = '';
  budgets.forEach((b, index) => {
    const div = document.createElement('div');
    div.textContent = b.name;
    div.dataset.index = index;
    listDiv.appendChild(div);
  });
}

