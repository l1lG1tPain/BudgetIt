// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è inline-–æ—à–∏–±–æ–∫ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
function showInlineError(input, message) {
  let errorElem = input.parentElement.querySelector('.error-message');
  if (!errorElem) {
    errorElem = document.createElement('div');
    errorElem.className = 'error-message';
    input.parentElement.appendChild(errorElem);
  }
  errorElem.textContent = message;
  // –î–µ–ª–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–∏–¥–∏–º–æ–π
  errorElem.classList.add('visible');
  
  // –ö—Ä–∞—Å–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ —Å–∞–º–æ–≥–æ –ø–æ–ª—è
  input.style.borderColor = 'red';
}

function clearInlineError(input) {
  const errorElem = input.parentElement.querySelector('.error-message');
  if (errorElem) {
    errorElem.textContent = '';
    errorElem.classList.remove('visible');
  }
  input.style.borderColor = '';
}


// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
function animateValue(element, start, end, duration, suffix = '') {
  let startTimestamp = null;
  const step = (timestamp) => {
    if (!startTimestamp) startTimestamp = timestamp;
    const progress = Math.min((timestamp - startTimestamp) / duration, 1);
    let currentVal = Math.floor(progress * (end - start) + start);
    element.textContent = formatNumber(currentVal) + (progress === 1 && suffix ? ` ${suffix}` : '');
    if (progress < 1) {
      window.requestAnimationFrame(step);
    }
  };
  window.requestAnimationFrame(step);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let budgets = [];
let currentBudgetIndex = 0;
let productNames = [];

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–∑–∞–∫—Ä—ã–≤–∞–µ—Ç dropdown –∏ –≤—Å–µ bottom-sheet, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
function openModal(id) {
  const modal = document.getElementById(id);
  if (!modal) return;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º backdrop –¥–ª—è –≤—Å–µ—Ö bottom-sheet'–æ–≤
  if (modal.classList.contains('bottom-sheet')) {
    const backdrop = document.getElementById('bottom-sheet-backdrop');
    backdrop.classList.remove('hidden');
  }
  
  modal.classList.remove('hidden');
}

function closeBottomSheets(exceptId) {
  const sheets = document.querySelectorAll('.bottom-sheet');
  sheets.forEach(sheet => {
    if (!exceptId || sheet.id !== exceptId) {
      sheet.classList.add('hidden');
    }
  });
}

function closeModal(id) {
  const modal = document.getElementById(id);
  if (modal) {
    modal.classList.add('hidden');
  }
  
  // –°–∫—Ä—ã–≤–∞–µ–º –±–ª—É—Ä, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–æ–¥–∞–ª–æ–∫
  const hasOpenModals = document.querySelectorAll('.bottom-sheet:not(.hidden)').length > 0;
  if (!hasOpenModals) {
    document.getElementById('bottom-sheet-backdrop').classList.add('hidden');
  }
}

// ======================
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–µ—Å—è—Ü (—Ç–µ–∫—É—â–∏–π)
// ======================
function setDefaultMonthFilter() {
  const today = new Date();
  const currentMonth = String(today.getMonth() + 1).padStart(2, '0'); // "01" - "12"

  // –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
  const monthNames = {
    "01": "–Ø–Ω–≤–∞—Ä—å",
    "02": "–§–µ–≤—Ä–∞–ª—å",
    "03": "–ú–∞—Ä—Ç",
    "04": "–ê–ø—Ä–µ–ª—å",
    "05": "–ú–∞–π",
    "06": "–ò—é–Ω—å",
    "07": "–ò—é–ª—å",
    "08": "–ê–≤–≥—É—Å—Ç",
    "09": "–°–µ–Ω—Ç—è–±—Ä—å",
    "10": "–û–∫—Ç—è–±—Ä—å",
    "11": "–ù–æ—è–±—Ä—å",
    "12": "–î–µ–∫–∞–±—Ä—å"
  };

  // –°—Ç–∞–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ + –∑–Ω–∞—á–µ–Ω–∏–µ
  const input = document.getElementById('month-filter-input');
  input.value = monthNames[currentMonth] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  input.setAttribute('data-value', currentMonth);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ DOM
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOMContentLoaded -> Start initialization.');
  const localData = localStorage.getItem('budgets');
  if (localData) {
    try {
      budgets = JSON.parse(localData);
    } catch(e) {
      console.log('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º budgets.');
      budgets = [];
    }
  }
  currentBudgetIndex = localStorage.getItem('currentBudgetIndex');
  if (!Array.isArray(budgets) || budgets.length === 0) {
    console.log('No budgets found -> Forcing close settings & open budget-modal.');
    closeModal('settings-page');
    budgets = [];
    localStorage.removeItem('budgets');
    localStorage.removeItem('currentBudgetIndex');
    openModal('budget-modal');
  } else {
    console.log('Budgets found -> length:', budgets.length);
    if (currentBudgetIndex === null || isNaN(currentBudgetIndex)) {
      currentBudgetIndex = 0;
      localStorage.setItem('currentBudgetIndex', currentBudgetIndex);
    } else {
      currentBudgetIndex = parseInt(currentBudgetIndex, 10);
    }
    updateHeader();
  }

  // –°—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–µ—Å—è—Ü (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ budgets)
  setDefaultMonthFilter();
  // –¢–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º UI
  updateUI();

  attachEventListeners();
  applyInputRestrictions();
  initializeCategoryButtons();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
  document.getElementById('settings-btn').addEventListener('click', function() {
    // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ DOM –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –≥—Ä–∞—Ñ–∏–∫–æ–≤
    setTimeout(() => {
      initializeAnalyticsCarousel();
    }, 300);
  });
  
  console.log('DOMContentLoaded -> Initialization finished.');
});

// –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–ø–∫–∏ –∏ UI
function updateHeader() {
  const headerEl = document.getElementById('current-budget');
  headerEl.textContent = budgets[currentBudgetIndex] ? budgets[currentBudgetIndex].name : 'BudgetIt';
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–º–æ–¥–∂–∏ (–±—é–¥–∂–µ—Ç, –¥–æ—Ö–æ–¥, —Ä–∞—Å—Ö–æ–¥, –¥–æ–ª–≥, –≤–∫–ª–∞–¥)
function getBudgetEmoji(value) {
  if (value < -100000000) return "üî•üï≥Ô∏èüíÄ";   // <- –º–µ–Ω—å—à–µ -100 –º–ª–Ω
  if (value < -10000000)  return "üíÄüíÄüíÄ";    // <- –º–µ–Ω—å—à–µ -10 –º–ª–Ω
  if (value < 0)          return "ü•∂üìâ";     // < 0
  if (value < 500000)     return "ü™±";       // < 500k
  if (value < 2000000)    return "üêü";       // < 2 –º–ª–Ω
  if (value < 10000000)   return "ü¶Ä";       // < 10 –º–ª–Ω
  if (value < 15000000)   return "üêô";       // < 15 –º–ª–Ω
  if (value < 25000000)   return "üê¨";       // < 25 –º–ª–Ω
  if (value < 40000000)   return "ü¶à";       // < 40 –º–ª–Ω
  if (value < 100000000)  return "üêã";       // < 100 –º–ª–Ω
  return "ü™êüöÄ";                         // 100 –º–ª–Ω+
}

function getIncomeEmoji(value) {
  if (value < 0)          return "‚ùì‚ùó";       // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ
  if (value < 200000)     return "ü§îüí∏"; 
  if (value < 1000000)    return "üòäüí≤";
  if (value < 5000000)    return "üòéüíµ";
  if (value < 10000000)   return "ü§ëüí∞";
  if (value < 50000000)   return "üè¶üí∞";
  return "üöÄü§ë"; // —Å–≤—ã—à–µ 50 –º–ª–Ω
}

function getExpenseEmoji(value) {
  if (value <= 0)         return "üò∂";       // –º–æ–∂–µ—Ç –±—ã—Ç—å 0
  if (value < 300000)     return "ü§èüíµ";
  if (value < 800000)     return "üò¨üõí";
  if (value < 5000000)    return "ü§Øüí∏";
  if (value < 20000000)   return "üí∏ü•µ";
  if (value < 50000000)   return "üî•üí≥";
  return "üî•üï≥Ô∏è";  // 50 –º–ª–Ω+
}

function getDebtEmoji(value) {
  if (value < 0)          return "‚ùìüí≥"; // –±—ã–≤–∞–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ
  if (value < 500000)     return "üòÖüí≥";
  if (value < 5000000)    return "üòìüìâ";
  if (value < 20000000)   return "üÜòüíÄ";
  return "üí£üí•"; // —Å–≤–µ—Ä—Ö–æ–≥—Ä–æ–º–Ω—ã–π –¥–æ–ª–≥
}

function getDepositEmoji(value) {
  if (value < 0)          return "‚ùóüè¶"; 
  if (value < 500000)     return "üêñüí∞";
  if (value < 2000000)    return "üí∞üí∞";
  if (value < 10000000)   return "üè¶üìà";
  if (value < 50000000)   return "üíéüíé";
  return "üíéüöÄ";
}

// –ü—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
function updateSelectedCategory() {
  const select = document.getElementById("expense-category");
  if (!select) return;
  const selectedOption = select.options[select.selectedIndex].text;
  select.setAttribute("data-display", selectedOption);
}
document.addEventListener("DOMContentLoaded", updateSelectedCategory);

// –û—Ç–º–µ—Ç–∏—Ç—å –¥–æ–ª–≥ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
function markDebtAsPaid(debtId) {
  const budget = budgets[currentBudgetIndex];
  if (!budget) return;
  const debt = budget.transactions.find(t => t.id === debtId && t.type === 'debt');
  if (!debt) {
    console.error("–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }
  debt.paid = true;
  debt.paidDate = new Date().toISOString();
  saveBudgets();
  updateUI();
  console.log("–î–æ–ª–≥ –æ–ø–ª–∞—á–µ–Ω:", debt);
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –º–µ—Å—è—Ü –¥–∞—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º monthFilter
function checkIfSameMonth(dateStr, filterValue) {
  if (!dateStr) return false;
  // –ï—Å–ª–∏ 'all', —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ–ª–≥ –Ω–µ –¥–∞—ë—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ (–∏—Ç–æ–≥ = 0)
  if (filterValue === 'all') return false;
  const mm = new Date(dateStr).toISOString().slice(5,7);
  return mm === filterValue;
}

// –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∏–∫–∞–º –Ω–∞ –±–ª–æ–∫–∏ –î–æ—Ö–æ–¥, –†–∞—Å—Ö–æ–¥, –î–æ–ª–≥ –∏ —Ç.–¥.
function attachFilterEventListeners() {
  const blockBudget = document.getElementById('block-budget');
  const blockIncome = document.getElementById('block-income');
  const blockExpense = document.getElementById('block-expense');
  const blockDeposit = document.getElementById('block-deposit');
  const blockDebt = document.getElementById('block-debt');

  blockBudget.addEventListener('click', () => {
    transactionFilter = 'all';
    updateUI();
  });
  blockIncome.addEventListener('click', () => {
    transactionFilter = 'income';
    updateUI();
  });
  blockExpense.addEventListener('click', () => {
    transactionFilter = 'expense';
    updateUI();
  });
  blockDeposit.addEventListener('click', () => {
    transactionFilter = 'deposit';
    updateUI();
  });
  blockDebt.addEventListener('click', () => {
    transactionFilter = 'debt';
    updateUI();
  });
}

let transactionFilter = 'all';

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
function updateUI() {
  console.log('updateUI called.');
  const budget = budgets[currentBudgetIndex];
  if (!budget) return;
  const transactions = budget.transactions || [];
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É (—Å—Ç—Ä–æ–∫–∞ "–í—Å–µ" => data-value="all")
  const monthFilter = document.getElementById('month-filter-input').getAttribute('data-value') || 'all';
  
  // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ–±—â–∏–π –Ω–∞–±–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –º–µ—Å—è—Ü—É
  let filtered = transactions.filter(t => {
    // –î–ª—è –¥–æ–ª–≥–∞ —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–∏–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–∫–µ
    if (t.type === 'debt') return true;
    
    if (monthFilter === 'all') return true;
    // –°–º–æ—Ç—Ä–∏–º –º–µ—Å—è—Ü —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const tMonth = new Date(t.date).toISOString().slice(5, 7);
    return tMonth === monthFilter;
  });

  // –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, –≤–∫–ª–∞–¥—ã (–±–µ–∑ —É—á—ë—Ç–∞ –¥–æ–ª–≥–æ–≤!)
  const totalIncome = filtered
    .filter(t => t.type === 'income')
    .reduce((sum, t) => sum + t.amount, 0);

  const totalExpense = filtered
    .filter(t => t.type === 'expense')
    .reduce((sum, t) => sum + t.amount, 0);

  const totalDeposit = filtered
    .filter(t => t.type === 'deposit')
    .reduce((sum, t) => {
      return sum + (t.status === '‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' ? t.amount : -t.amount);
    }, 0);

  // –ù–∞—á–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç (–¥–æ —É—á—ë—Ç–∞ –¥–æ–ª–≥–æ–≤)
  let overallBudget = totalIncome - totalExpense - totalDeposit;

  // –°—á–∏—Ç–∞–µ–º ¬´–æ–±—ä—ë–º¬ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ + –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±—é–¥–∂–µ—Ç
  let totalDebt = 0; 

  // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –í–°–ï–ú (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ –º–µ—Å—è—Ü—É) –¥–æ–ª–≥–æ–≤—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º 
  filtered
    .filter(t => t.type === 'debt')
    .forEach(t => {
      // –ï—Å–ª–∏ –¥–æ–ª–≥ –Ω–µ –æ–ø–ª–∞—á–µ–Ω => –¥–µ–π—Å—Ç–≤—É–µ—Ç ¬´—Ç–µ–∫—É—â–∏–π¬ª —ç—Ñ—Ñ–µ–∫—Ç
      if (!t.paid) {
        if (t.direction === 'owe') {
          // —è –¥–æ–ª–∂–µ–Ω => —Å–µ–π—á–∞—Å —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ —É –º–µ–Ω—è (–ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞—Ç–∏–ª)
          // +Budget, +Debt
          overallBudget += t.amount;
          totalDebt += t.amount;
        } else {
          // –º–Ω–µ –¥–æ–ª–∂–Ω—ã => —è –æ—Ç–¥–∞–ª –¥–µ–Ω—å–≥–∏
          // -Budget, +Debt
          overallBudget -= t.amount;
          totalDebt += t.amount;
        }
      } else {
        // –î–æ–ª–≥ –æ–ø–ª–∞—á–µ–Ω => —Å–º–æ—Ç—Ä–∏–º, –≤ –∫–∞–∫–æ–º –º–µ—Å—è—Ü–µ –æ–Ω –∑–∞–∫—Ä—ã—Ç (paidDate)
        if (checkIfSameMonth(t.paidDate, monthFilter)) {
          // direction='owe' => –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —è –∑–∞–ø–ª–∞—Ç–∏–ª => -Budget
          // direction='owed' => –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –º–Ω–µ –≤–µ—Ä–Ω—É–ª–∏ => +Budget
          if (t.direction === 'owe') {
            overallBudget -= t.amount;
          } else {
            overallBudget += t.amount;
          }
        }
      }
    });

  console.log("totalDebt =", totalDebt, "overallBudget =", overallBudget);

  // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –±–ª–æ–∫–∞—Ö
  const budgetEl  = document.querySelector('#block-budget .block-value');
  const incomeEl  = document.querySelector('#block-income .block-value');
  const expenseEl = document.querySelector('#block-expense .block-value');
  const depositEl = document.querySelector('#block-deposit .block-value');
  const debtEl    = document.querySelector('#block-debt .block-value');

  animateValue(budgetEl,  parseInt(budgetEl.textContent.replace(/\D/g, '')) || 0,  overallBudget,    800);
  animateValue(incomeEl,  parseInt(incomeEl.textContent.replace(/\D/g, '')) || 0,  totalIncome,      800);
  animateValue(expenseEl, parseInt(expenseEl.textContent.replace(/\D/g, '')) || 0, totalExpense,     800);
  animateValue(depositEl, parseInt(depositEl.textContent.replace(/\D/g, '')) || 0, totalDeposit,     800);
  animateValue(debtEl,    parseInt(debtEl.textContent.replace(/\D/g, '')) || 0,    totalDebt,        800);

  document.querySelector('#block-budget .emoji').textContent  = getBudgetEmoji(overallBudget);
  const incomeEmojiEl = document.querySelector('#block-income .emoji');
  if (incomeEmojiEl) incomeEmojiEl.textContent = getIncomeEmoji(totalIncome);
  document.querySelector('#block-expense .emoji').textContent = getExpenseEmoji(totalExpense);
  document.querySelector('#block-debt .emoji').textContent    = getDebtEmoji(totalDebt);
  const depositEmojiEl = document.querySelector('#block-deposit .emoji');
  if (depositEmojiEl) depositEmojiEl.textContent = getDepositEmoji(totalDeposit);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã (transactionFilter)
  let finalFiltered = filtered.filter(t => {
    if (transactionFilter !== 'all' && t.type !== transactionFilter) {
      return false;
    }
    return true;
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  updateTransactionList(finalFiltered);
}

// –í—ã–∑–æ–≤ attachFilterEventListeners –æ–¥–∏–Ω —Ä–∞–∑
document.addEventListener('DOMContentLoaded', () => {
  attachFilterEventListeners();
});

// –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function updateTransactionList(transactions) {
  console.log('updateTransactionList called, count =', transactions.length);
  const list = document.getElementById('transaction-list');
  list.innerHTML = '';
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —É–±—ã–≤. (—Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É)
  transactions.sort((a, b) => new Date(b.date) - new Date(a.date));
  
  transactions.forEach(t => {
    const li = document.createElement('li');
    li.style.borderLeftColor = getTypeColor(t.type);

    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–ª–≥, —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥ #–î–æ–ª–∂–µ–Ω / #–ú–Ω–µ –¥–æ–ª–∂–Ω—ã
    let debtTag = '';
    if (t.type === 'debt') {
      if (t.direction === 'owe') {
        debtTag = ' <span style="color: #e82b2a; font-size: 0.9em;">#–î–æ–ª–∂–µ–Ω</span>';
      } else {
        debtTag = ' <span style="color: #2be82a; font-size: 0.9em;">#–ú–Ω–µ –¥–æ–ª–∂–Ω—ã</span>';
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ –¥–ª—è –≤–∫–ª–∞–¥–æ–≤
    let amountSign = '';
    if (t.type === 'deposit') {
      amountSign = t.status === '‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' ? '+' : '-';
    }

    li.innerHTML = `
    <div style="display: flex; justify-content: space-between; align-items: flex-start; flex-wrap: nowrap;">
      <div style="max-width: 75%; overflow: hidden; word-break: break-word;">
        <strong>${getTypeName(t.type)}: </strong>${t.category || t.name}${debtTag}
      </div>
      <div style="font-weight: bold; white-space: nowrap; margin-left: 10px;">
        ${amountSign}${formatNumber(t.amount)}
      </div>
    </div>
    <div style="font-size: 0.8em; color: gray; text-align: right;">
      ${formatDate(t.date)}
    </div>
    ${
      t.type === 'debt'
        ? t.paid
          ? `<span style="color: green; font-weight: bold;">‚úÖ –û–ø–ª–∞—á–µ–Ω–æ</span>`
          : `<button class="pay-debt" data-id="${t.id}">–û–ø–ª–∞—Ç–∏—Ç—å</button>`
        : ''
    }
  `;

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ –∫–ª–∏–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
    li.addEventListener('click', () => openTransactionDetail(t));
    list.appendChild(li);
  });

  // –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç—å" (–¥–ª—è –¥–æ–ª–≥–æ–≤)
  document.querySelectorAll('.pay-debt').forEach(button => {
    button.addEventListener('click', (event) => {
      event.stopPropagation(); // —á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏—Å—å –¥–µ—Ç–∞–ª–∏
      const debtId = parseInt(event.target.dataset.id, 10);
      markDebtAsPaid(debtId);
    });
  });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function openTransactionDetail(transaction) {
  document.getElementById('detail-type').textContent = getTypeName(transaction.type);

  // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–ª–≥, –¥–æ–±–∞–≤–∏–º —Ç–µ–≥ #–î–æ–ª–∂–µ–Ω / #–ú–Ω–µ –¥–æ–ª–∂–Ω—ã –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
  if (transaction.type === 'debt') {
    const directionTag = transaction.direction === 'owe' ? ' #–î–æ–ª–∂–µ–Ω' : ' #–ú–Ω–µ –¥–æ–ª–∂–Ω—ã';
    document.getElementById('detail-name').textContent = (transaction.name || transaction.category) + directionTag;
  } else {
    document.getElementById('detail-name').textContent = transaction.category || transaction.name;
  }

  document.getElementById('detail-amount').textContent = '–°—É–º–º–∞: ' + formatNumber(transaction.amount);
  document.getElementById('detail-date').textContent = '–î–∞—Ç–∞: ' + formatDate(transaction.date);

  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—É—Å (–¥–ª—è –≤–∫–ª–∞–¥–æ–≤)
  const detailStatus = document.getElementById('detail-status');
  if (transaction.type === 'deposit') {
    detailStatus.classList.remove('hidden');
    detailStatus.textContent = '–°—Ç–∞—Ç—É—Å: ' + transaction.status;
  } else {
    detailStatus.classList.add('hidden');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤)
  const prodDiv = document.getElementById('detail-products');
  if (transaction.type === 'expense' && transaction.products && transaction.products.length) {
    prodDiv.classList.remove('hidden');
    prodDiv.innerHTML = '<strong>–¢–æ–≤–∞—Ä—ã:</strong><br>' +
      transaction.products.map(p => `${p.name} (${p.quantity} x ${formatNumber(p.price)})`).join('<br>');
  } else {
    prodDiv.classList.add('hidden');
  }

  // –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª–≥" (–µ—Å–ª–∏ —ç—Ç–æ debt –∏ –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ)
  const payDebtBtn = document.getElementById('pay-debt');
  if (transaction.type === 'debt' && !transaction.paid) {
    payDebtBtn.classList.remove('hidden');
    payDebtBtn.onclick = () => markDebtAsPaid(transaction.id);
  } else {
    payDebtBtn.classList.add('hidden');
  }

  // –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"
  document.getElementById('delete-transaction').onclick = () => {
    deleteTransaction(transaction.id);
    closeModal('transaction-detail-sheet');
  };

  openModal('transaction-detail-sheet');
}

function deleteTransaction(transactionId) {
  const transactions = budgets[currentBudgetIndex].transactions;
  const index = transactions.findIndex(t => t.id === transactionId);
  if (index !== -1) {
    transactions.splice(index, 1);
    saveBudgets();
    updateUI();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function attachEventListeners() {
  console.log('attachEventListeners called.');
  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
  document.getElementById('budget-form').addEventListener('submit', e => {
    e.preventDefault();
    const nameInput = e.target['budget-name'];
    clearInlineError(nameInput);
    const name = nameInput.value.trim();
    if (name && validateBudgetName(name)) {
      budgets.push({ name, transactions: [] });
      currentBudgetIndex = budgets.length - 1;
      saveBudgets();
      updateHeader();
      updateUI();
      closeModal('budget-modal');
    } else {
      showInlineError(nameInput, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞!');
    }
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
  document.getElementById('current-budget').addEventListener('click', () => {
    console.log('current-budget clicked -> open budget-switch-sheet');
    populateBudgetList();
    openModal('budget-switch-sheet');
  });
  document.getElementById('close-budget-sheet').addEventListener('click', () => {
    closeModal('budget-switch-sheet');
  });
  document.querySelector('#budget-switch-sheet .budget-list').addEventListener('click', e => {
    if (e.target.dataset.index !== undefined) {
      console.log('Switching to budget index:', e.target.dataset.index);
      currentBudgetIndex = parseInt(e.target.dataset.index, 10);
      saveBudgets();
      updateHeader();
      updateUI();
      closeModal('budget-switch-sheet');
    }
  });
  document.getElementById('add-budget-btn').addEventListener('click', () => {
    const newNameInput = document.getElementById('new-budget-name');
    clearInlineError(newNameInput);
    const newName = newNameInput.value.trim();
    console.log('add-budget-btn clicked, newName =', newName);
    if (newName && validateBudgetName(newName)) {
      budgets.push({ name: newName, transactions: [] });
      saveBudgets();
      populateBudgetList();
      newNameInput.value = '';
    } else {
      showInlineError(newNameInput, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞!');
    }
  });

  // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É
  document.getElementById('month-filter-input').addEventListener('click', function(){
    closeBottomSheets();
    this.nextElementSibling.classList.toggle('hidden');
  });
  document.querySelectorAll('#month-filter-dropdown li').forEach(li => {
    li.addEventListener('click', function(){
      const value = this.getAttribute('data-value');
      document.getElementById('month-filter-input').value = this.textContent;
      document.getElementById('month-filter-input').setAttribute('data-value', value);
      document.getElementById('month-filter-dropdown').classList.add('hidden');
      updateUI();
    });
  });

  // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ => –æ—Ç–∫—Ä—ã–≤–∞–µ–º bottom-sheet
  document.getElementById('add-btn').addEventListener('click', () => {
    const today = new Date().toISOString().split('T')[0];
    ['income-date','expense-date','debt-date','deposit-date'].forEach(id => {
      document.getElementById(id).value = today;
    });

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ—Ö–æ–¥–æ–≤ (–∏ —á–∏–ø—Å—É –¥–æ—Ö–æ–¥–æ–≤)
    hideAllForms();
    openForm('income-form');
    // –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å "active" –Ω–∞ —á–∏–ø—Å–∞—Ö –∏ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å "–î–æ—Ö–æ–¥—ã"
    document.querySelectorAll('.transaction-type-chips .chip-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    const incomeBtn = document.querySelector('.transaction-type-chips .chip-btn[data-type="income"]');
    if (incomeBtn) incomeBtn.classList.add('active');

    openModal('transaction-sheet');
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º –≤–Ω—É—Ç—Ä–∏ bottom-sheet (—á–∏–ø—Å—ã)
  document.querySelectorAll('.transaction-type-chips .chip-btn').forEach(button => {
    button.addEventListener('click', () => {
      // 1. –°–Ω–∏–º–∞–µ–º "active" —Å–æ –≤—Å–µ—Ö —á–∏–ø—Å–æ–≤
      document.querySelectorAll('.transaction-type-chips .chip-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      // 2. –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–∂–∞—Ç—É—é
      button.classList.add('active');
      
      // 3. –ü—Ä—è—á–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã
      hideAllForms();
      
      // 4. –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ–æ—Ä–º—É
      const type = button.getAttribute('data-type'); 
      if (type === 'income')  openForm('income-form');
      if (type === 'expense') openForm('expense-form');
      if (type === 'debt')    openForm('debt-form');
      if (type === 'deposit') openForm('deposit-form');
    });
  });
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  document.querySelectorAll('.close-form').forEach(btn => {
    btn.addEventListener('click', () => {
      console.log('close-form clicked -> close transaction-sheet');
      closeModal('transaction-sheet');
    });
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º
  document.getElementById('income-form').addEventListener('submit', submitIncome);
  document.getElementById('expense-form').addEventListener('submit', submitExpense);
  document.getElementById('debt-form').addEventListener('submit', submitDebt);
  document.getElementById('deposit-form').addEventListener('submit', submitDeposit);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–≤ —Ñ–æ—Ä–º–µ —Ä–∞—Å—Ö–æ–¥–æ–≤)
  document.getElementById('add-product').addEventListener('click', () => {
    console.log('add-product clicked -> create new product-item');
    const productsList = document.getElementById('products-list');
    const productCount = productsList.children.length;
    const container = document.createElement('div');
    container.classList.add('product-item');
    
    container.innerHTML = `
      <input type="text" class="product-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" maxlength="16" list="product-names-list">
      <input type="tel" class="product-quantity numeric-format" placeholder="–ö–æ–ª-–≤–æ" required maxlength="4">
      <input type="tel" class="product-price numeric-format" placeholder="–¶–µ–Ω–∞" required maxlength="11" inputmode="numeric">
      ${ productCount >= 1 ? `<button type="button" class="delete-product" title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä">√ó</button>` : '' }
    `;
    
    productsList.appendChild(container);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    const quantityInput = container.querySelector('.product-quantity');
    const priceInput = container.querySelector('.product-price');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    quantityInput.addEventListener('input', (e) => {
      const cursorPosition = quantityInput.selectionStart;
      let value = quantityInput.value.replace(/[^0-9.,]/g, '');
      quantityInput.value = value;
      quantityInput.setSelectionRange(cursorPosition, cursorPosition);
    });

    quantityInput.addEventListener('blur', () => {
      const rawValue = quantityInput.value.replace(',', '.').replace(/\s/g, '');
      let num = parseFloat(rawValue);
      if (isNaN(num)) {
        num = 0;
      }
      quantityInput.value = rawValue;
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è —Ü–µ–Ω—ã
    priceInput.addEventListener('input', (e) => {
      const cursorPosition = priceInput.selectionStart;
      let value = priceInput.value.replace(/[^0-9.,]/g, '');
      const rawValue = value.replace(',', '.');
      let num = parseFloat(rawValue);
      if (isNaN(num)) {
        num = 0;
      }
      
      let formatted = num.toLocaleString('ru-RU', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 3
      });
      formatted = formatted.replace(/\u00A0/g, ' ');
      
      priceInput.value = formatted;
      const newCursorPosition = cursorPosition + (formatted.length - value.length);
      priceInput.setSelectionRange(newCursorPosition, newCursorPosition);
    });

    priceInput.addEventListener('blur', () => {
      const rawValue = priceInput.value.replace(',', '.').replace(/\s/g, '');
      let num = parseFloat(rawValue);
      if (isNaN(num)) {
        num = 0;
      }
      
      let formatted = num.toLocaleString('ru-RU', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 3
      });
      formatted = formatted.replace(/\u00A0/g, ' ');
      
      priceInput.value = formatted;
    });

    const deleteBtn = container.querySelector('.delete-product');
    if (deleteBtn) {
      deleteBtn.addEventListener('click', () => {
        container.remove();
      });
    }
  });

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  document.getElementById('settings-btn').addEventListener('click', () => {
    console.log('settings-btn clicked -> open settings-page');
    openModal('settings-page');
  });
  document.getElementById('close-settings').addEventListener('click', () => {
    closeModal('settings-page');
  });
  document.getElementById('export-btn').addEventListener('click', exportData);
  document.getElementById('import-file').addEventListener('change', importData);

  // Bottom-sheet —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  document.getElementById('close-detail').addEventListener('click', () => {
    closeModal('transaction-detail-sheet');
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWA
  let deferredPrompt;
  window.addEventListener('beforeinstallprompt', e => {
    console.log('beforeinstallprompt event triggered.');
    e.preventDefault();
    deferredPrompt = e;
    document.getElementById('install-btn').style.display = 'block';
  });
  document.getElementById('install-btn').addEventListener('click', () => {
    console.log('install-btn clicked -> prompt PWA');
    deferredPrompt.prompt();
    deferredPrompt.userChoice.then(() => {
      deferredPrompt = null;
      document.getElementById('install-btn').style.display = 'none';
    });
  });

  // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ select –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  document.querySelectorAll('select').forEach(select => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ select
    if (select.parentNode.querySelector('.category-select-container')) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ —Å–∫—Ä—ã—Ç–æ–≥–æ input
    const container = document.createElement('div');
    container.className = 'category-select-container';
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–Ω–æ–ø–∫—É
    const button = document.createElement('button');
    button.className = 'category-select-button';
    button.textContent = select.options[select.selectedIndex]?.text || '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    
    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π input –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    const hiddenInput = document.createElement('input');
    hiddenInput.type = 'hidden';
    hiddenInput.name = 'category';
    hiddenInput.value = select.value;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
    button.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const currentSheet = document.getElementById('transaction-sheet');
      if (currentSheet && !currentSheet.classList.contains('hidden')) {
        openCategorySheet(currentSheet);
      }
    });
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
    container.appendChild(button);
    container.appendChild(hiddenInput);
    select.style.display = 'none';
    select.parentNode.insertBefore(container, select);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ backdrop –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const backdrop = document.getElementById('bottom-sheet-backdrop');
  if (backdrop) {
    backdrop.addEventListener('click', function(e) {
      if (e.target === e.currentTarget) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        document.querySelectorAll('.bottom-sheet').forEach(sheet => {
          sheet.classList.add('hidden');
        });
        // –°–∫—Ä—ã–≤–∞–µ–º backdrop
        this.classList.add('hidden');
      }
    });
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function hideAllForms() {
  console.log('hideAllForms called.');
  document.querySelectorAll('.transaction-form').forEach(form => form.classList.add('hidden'));
}
function openForm(formId) {
  console.log('openForm called for:', formId);
  document.getElementById(formId).classList.remove('hidden');
}

// –î–æ—Ö–æ–¥
function submitIncome(e) {
  e.preventDefault();
  console.log('submitIncome called.');
  const form = e.target;
  const categoryInput = form['income-category'];
  clearInlineError(categoryInput);
  if (!categoryInput.value) {
    showInlineError(categoryInput, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    return;
  }
  const amountInput = form['income-amount'];
  clearInlineError(amountInput);
  const amount = parseInt(amountInput.value.replace(/\D/g, ''), 10) || 0;
  if (amount <= 0) {
    showInlineError(amountInput, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    return;
  }
  const transaction = {
    id: Date.now(),
    type: 'income',
    date: form['income-date'].value,
    category: categoryInput.value,
    amount
  };
  addTransaction(transaction);
  form.reset();
  closeModal('transaction-sheet');
}

// –†–∞—Å—Ö–æ–¥
function submitExpense(e) {
  e.preventDefault();
  console.log('submitExpense called.');
  const form = e.target;
  const categoryInput = form['expense-category'];
  clearInlineError(categoryInput);
  if (!categoryInput.value) {
    showInlineError(categoryInput, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    return;
  }
  let isFormValid = true;
  const productElements = Array.from(document.querySelectorAll('#products-list .product-item'));
  const products = [];
  
  productElements.forEach(item => {
    const nameInput = item.querySelector('.product-name');
    const quantityInput = item.querySelector('.product-quantity');
    const priceInput = item.querySelector('.product-price');
    clearInlineError(nameInput);
    clearInlineError(quantityInput);
    clearInlineError(priceInput);

    const name = nameInput.value.trim();
    const rawQuantity = quantityInput.value.trim();
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∑–∞–ø—è—Ç—É—é ‚Äî –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ç–æ—á–∫—É
    const preparedQuantity = rawQuantity.replace(',', '.');

    // –ü–∞—Ä—Å–∏–º –∫–∞–∫ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    const quantity = parseFloat(preparedQuantity);

    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Ü–µ–Ω—ã
    const rawPrice = priceInput.value.replace(/\s+/g, '').replace(',', '.');
    const onlyDigitsAndDot = rawPrice.replace(/[^0-9.]/g, ''); 
    const price = parseFloat(onlyDigitsAndDot) || 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if (isNaN(quantity) || quantity <= 0) {
      showInlineError(quantityInput, '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.5');
      isFormValid = false;
    }
    if (isNaN(price) || price <= 0) {
      showInlineError(priceInput, '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É');
      isFormValid = false;
    }

    // –ï—Å–ª–∏ –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—ã—Ç–æ–≥
    const itemTotal = quantity * price;

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –ø—É—Å—Ç—ã ‚Äì —É–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –±–ª–æ–∫
    if (name === '' && quantity === 0 && price === 0) {
      item.remove();
      return;
    }
    if (name === '') {
      showInlineError(nameInput, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      isFormValid = false;
    }
    if (quantity <= 0) {
      showInlineError(quantityInput, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
      isFormValid = false;
    }
    if (price <= 0) {
      showInlineError(priceInput, '–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É');
      isFormValid = false;
    }
    if (isFormValid) {
      products.push({ name, quantity, price });
    }
  });
  if (!isFormValid || products.length === 0) {
    return;
  }
  const totalAmount = products.reduce((sum, p) => sum + (p.quantity * p.price), 0);
  const transaction = {
    id: Date.now(),
    type: 'expense',
    date: form['expense-date'].value,
    category: categoryInput.value,
    amount: totalAmount,
    products
  };
  addTransaction(transaction);

  // –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
  products.forEach(p => {
    if (p.name && !productNames.includes(p.name)) {
      productNames.push(p.name);
    }
  });
  updateProductDatalist();

  form.reset();
  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã: –æ–¥–∏–Ω ¬´–ø—É—Å—Ç–æ–π¬ª —Ç–æ–≤–∞—Ä
  document.getElementById('products-list').innerHTML = `
    <div class="product-item">
      <input type="text" class="product-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" maxlength="16" list="product-names-list">
      <input type="tel" class="product-quantity" placeholder="–ö–æ–ª-–≤–æ" required maxlength="3">
      <input type="tel" class="product-price" placeholder="–¶–µ–Ω–∞" required maxlength="11" inputmode="numeric">
    </div>
  `;
  // –í—ã–∑—ã–≤–µ–º —Å–Ω–æ–≤–∞ applyInputRestrictions –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  // –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ blur –¥–ª—è numeric-format —Å–¥–µ–ª–∞–Ω–∞ –Ω–∏–∂–µ

  closeModal('transaction-sheet');
}

// –î–æ–ª–≥
function submitDebt(e) {
  e.preventDefault();
  console.log('submitDebt called.');
  const form = e.target;
  const nameInput = form['debt-name'];
  clearInlineError(nameInput);
  const amountInput = form['debt-amount'];
  clearInlineError(amountInput);
  const directionSelect = form['debt-direction'];
  clearInlineError(directionSelect);

  const amount = parseInt(amountInput.value.replace(/\D/g, ''), 10) || 0;
  if (nameInput.value.trim() === '') {
    showInlineError(nameInput, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
    return;
  }
  if (amount <= 0) {
    showInlineError(amountInput, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    return;
  }
  if (!directionSelect.value) {
    showInlineError(directionSelect, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–ª–≥–∞');
    return;
  }

  // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º direction
  const transaction = {
    id: Date.now(),
    type: 'debt',
    date: form['debt-date'].value,
    name: nameInput.value.trim(),
    amount,
    paid: false,
    direction: directionSelect.value // 'owe' | 'owed'
  };
  addTransaction(transaction);
  form.reset();
  closeModal('transaction-sheet');
}

// –í–∫–ª–∞–¥
function submitDeposit(e) {
  e.preventDefault();
  console.log('submitDeposit called.');
  const form = e.target;
  const statusInput = form['deposit-status'];
  clearInlineError(statusInput);
  if (!statusInput.value) {
    showInlineError(statusInput, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å');
    return;
  }
  const amountInput = form['deposit-amount'];
  clearInlineError(amountInput);
  const amount = parseInt(amountInput.value.replace(/\D/g, ''), 10) || 0;
  if (amount <= 0) {
    showInlineError(amountInput, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    return;
  }
  const transaction = {
    id: Date.now(),
    type: 'deposit',
    date: form['deposit-date'].value,
    name: form['deposit-name'].value.trim(),
    amount,
    status: statusInput.value
  };
  addTransaction(transaction);
  form.reset();
  closeModal('transaction-sheet');
}

// –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç
function addTransaction(transaction) {
  console.log('addTransaction called:', transaction);
  if (!budgets[currentBudgetIndex].transactions) {
    budgets[currentBudgetIndex].transactions = [];
  }
  budgets[currentBudgetIndex].transactions.push(transaction);
  saveBudgets();
  updateUI();
}

document.querySelectorAll('input.numeric-format').forEach(input => {
  // 1. –ü—Ä–∏ –≤–≤–æ–¥–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –∑–∞–ø—è—Ç—É—é
  input.addEventListener('input', (e) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    const cursorPosition = input.selectionStart;
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
    let value = input.value.replace(/[^0-9.,]/g, '');
    
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    const rawValue = value.replace(',', '.');
    let num = parseFloat(rawValue);
    if (isNaN(num)) {
      num = 0;
    }
    
    // –î–ª—è –ø–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
    if (input.classList.contains('product-quantity')) {
      // –û—Å—Ç–∞–≤–ª—è–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—ã—Å—è—á
      input.value = value;
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
      input.setSelectionRange(cursorPosition, cursorPosition);
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É) —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
      let formatted = num.toLocaleString('ru-RU', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 3
      });
      
      // –ú–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ
      formatted = formatted.replace(/\u00A0/g, ' ');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
      input.value = formatted;
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
      const newCursorPosition = cursorPosition + (formatted.length - value.length);
      input.setSelectionRange(newCursorPosition, newCursorPosition);
    }
  });

  // 2. –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Ç—ã—Å—è—á–∏
  input.addEventListener('blur', () => {
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, —á—Ç–æ–± parseFloat –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–Ω—è–ª –¥—Ä–æ–±—å
    const rawValue = input.value.replace(',', '.').replace(/\s/g, '');
    let num = parseFloat(rawValue);
    if (isNaN(num)) {
      num = 0;
    }

    // –î–ª—è –ø–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
    if (input.classList.contains('product-quantity')) {
      // –û—Å—Ç–∞–≤–ª—è–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—ã—Å—è—á
      input.value = rawValue;
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É) —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
      let formatted = num.toLocaleString('ru-RU', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 3
      });
      
      // –ú–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ
      formatted = formatted.replace(/\u00A0/g, ' ');
      
      input.value = formatted;
    }
  });
});


// –≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç
function exportData() {
  console.log('exportData called.');
  const dataStr = JSON.stringify(budgets);
  const blob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'budgets.json';
  a.click();
}
function importData(e) {
  console.log('importData called.');
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = () => {
    try {
      budgets = JSON.parse(reader.result);
      currentBudgetIndex = 0;
      saveBudgets();
      updateHeader();
      updateUI();
      alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞!');
    }
  };
  reader.readAsText(file);
}
function saveBudgets() {
  localStorage.setItem('budgets', JSON.stringify(budgets));
  localStorage.setItem('currentBudgetIndex', currentBudgetIndex);
}

// –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function formatNumber(num) {
  return num.toLocaleString('ru-RU', {
    minimumFractionDigits: 0, // –∏–ª–∏ 2, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –≤—Å–µ–≥–¥–∞ –¥–≤–µ –∫–æ–ø–µ–π–∫–∏
    maximumFractionDigits: 2  // –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞–º–∏
  });
}

function formatDate(dateStr) {
  const date = new Date(dateStr);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: '2-digit'
  });
}
function getTypeName(type) {
  const map = { income: '–î–æ—Ö–æ–¥', expense: '–†–∞—Å—Ö–æ–¥', debt: '–î–æ–ª–≥', deposit: '–í–∫–ª–∞–¥' };
  return map[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}
function getTypeColor(type) {
  const rootStyles = getComputedStyle(document.documentElement);
  const map = {
    income:  rootStyles.getPropertyValue('--income-color').trim(),
    expense: rootStyles.getPropertyValue('--expense-color').trim(),
    debt:    rootStyles.getPropertyValue('--debt-color').trim(),
    deposit: rootStyles.getPropertyValue('--deposit-color').trim()
  };
  return map[type] || 'black';
}
function validateBudgetName(name) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, emoji
  const regex = /^[\p{L}\p{N}\p{Emoji}\s]+$/u;
  return regex.test(name);
}
function updateProductDatalist() {
  const dataList = document.getElementById('product-names-list');
  dataList.innerHTML = '';
  productNames.forEach(name => {
    const option = document.createElement('option');
    option.value = name;
    dataList.appendChild(option);
  });
}
function applyInputRestrictions() {
  console.log('applyInputRestrictions called.');
  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
  document.querySelectorAll('input[type="text"]').forEach(input => {
    input.addEventListener('input', e => {
      // –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
      e.target.value = e.target.value.replace(/[^\p{L}\p{N}\p{Emoji}\s]/gu, '').slice(0, 20);
    });
  });

  // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è inputmode="numeric",
  // –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ—ë.
  // –ù–æ –≤ —Ü–µ–ª–æ–º, –Ω–∏–∂–µ ‚Äî –ª–∏—à–Ω–∏–π –∫–æ–¥, —Ä–∞–∑ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å "–í–∞—Ä–∏–∞–Ω—Ç B" –¥–ª—è .numeric-format
  /*
  document.querySelectorAll('input[inputmode="numeric"]').forEach(input => {
    input.addEventListener('input', e => {
      const raw = e.target.value.replace(/\D/g, '');
      e.target.value = raw.replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');
    });
  });
  */
}

// –°–ø–∏—Å–æ–∫ –±—é–¥–∂–µ—Ç–æ–≤ (–¥–ª—è bottom-sheet –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
function populateBudgetList() {
  console.log('populateBudgetList called.');
  const listDiv = document.querySelector('#budget-switch-sheet .budget-list');
  listDiv.innerHTML = '';
  budgets.forEach((b, index) => {
    const div = document.createElement('div');
    div.classList.add('budget-item');
    div.innerHTML = `
      <span>${b.name}</span>
      <button class="delete-budget-btn" data-index="${index}">üóëÔ∏è</button>
    `;
    div.addEventListener('click', () => switchBudget(index));
    listDiv.appendChild(div);
  });
  document.querySelectorAll('.delete-budget-btn').forEach(button => {
    button.addEventListener('click', event => {
      event.stopPropagation();
      const idx = parseInt(event.target.dataset.index, 10);
      openDeleteConfirmation(idx);
    });
  });
}

let budgetToDelete = null;

function openDeleteConfirmation(index) {
  budgetToDelete = index;
  console.log(`–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –±—é–¥–∂–µ—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º: ${budgetToDelete}`);
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ bottom-sheet –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
  closeBottomSheets();
  const modal = document.getElementById('delete-budget-modal');
  if (!modal) {
    console.error("–û—à–∏–±–∫–∞: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
    return;
  }
  modal.classList.remove('hidden');
}

document.addEventListener("DOMContentLoaded", () => {
  document.getElementById('confirm-delete-budget').addEventListener('click', () => {
    if (budgetToDelete !== null) {
      deleteBudget(budgetToDelete);
      budgetToDelete = null;
      document.getElementById('delete-budget-modal').classList.add('hidden');
      document.getElementById('bottom-sheet-backdrop').classList.add('hidden');
    }
  });
  document.getElementById('cancel-delete-budget').addEventListener('click', () => {
    budgetToDelete = null;
    document.getElementById('delete-budget-modal').classList.add('hidden');
    document.getElementById('bottom-sheet-backdrop').classList.add('hidden');
  });
  document.getElementById('export-before-delete').addEventListener('click', exportData);
});

document.addEventListener('DOMContentLoaded', () => {
  const slidesContainer = document.querySelector('.slides-container');
  if (!slidesContainer) return; // –µ—Å–ª–∏ –Ω–µ—Ç –±–∞–Ω–Ω–µ—Ä–æ–≤, –≤—ã—Ö–æ–¥–∏–º

  const slides = document.querySelectorAll('.banner-slide');
  let slideIndex = 0;

  // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–¥–≤–∏–≥–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–ª–∞–π–¥
  function showSlide(index) {
    slidesContainer.style.transform = `translateX(-${index * 100}%)`;
  }

  // –§—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—â–∞—è—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
  function nextSlide() {
    slideIndex = (slideIndex + 1) % slides.length;
    showSlide(slideIndex);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã)
  const intervalId = setInterval(nextSlide, 6000);

  // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–ª–∞–π–¥ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º data-link
  slides.forEach(slide => {
    slide.addEventListener('click', () => {
      const link = slide.dataset.link;
      if (link) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        window.open(link, '_blank');
      }
      // –ï—Å–ª–∏ data-link –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –±–∞–Ω–Ω–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
    });
  });
});


function deleteBudget(index) {
  if (index < 0 || index >= budgets.length) {
    console.error("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±—é–¥–∂–µ—Ç–∞!");
    return;
  }
  console.log(`–£–¥–∞–ª—è–µ–º –±—é–¥–∂–µ—Ç: ${budgets[index].name}`);
  budgets.splice(index, 1);
  if (budgets.length === 0) {
    localStorage.removeItem('budgets');
    localStorage.removeItem('currentBudgetIndex');
    openModal('budget-modal');
  } else {
    if (currentBudgetIndex === index) {
      currentBudgetIndex = 0;
    } else if (currentBudgetIndex > index) {
      currentBudgetIndex--;
    }
    saveBudgets();
    updateHeader();
    updateUI();
  }
  saveBudgets();
  populateBudgetList();
}

function switchBudget(index) {
  if (index < 0 || index >= budgets.length) {
    console.error("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±—é–¥–∂–µ—Ç–∞!");
    return;
  }
  console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±—é–¥–∂–µ—Ç: ${budgets[index].name}`);
  currentBudgetIndex = index;
  saveBudgets();
  updateHeader();
  updateUI();
  closeModal('budget-switch-sheet');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è bottom-sheet —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
function openCategorySheet(currentSheet) {
  // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É –≤ —Ç–µ–∫—É—â–µ–º bottom-sheet
  const activeForm = currentSheet.querySelector('.transaction-form:not(.hidden)');
  if (!activeForm) {
    console.error('No active form found in current sheet');
    return;
  }

  // –ù–∞—Ö–æ–¥–∏–º select —ç–ª–µ–º–µ–Ω—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º–µ
  const currentSelect = activeForm.querySelector('select[id$="-category"], select[id$="-status"], select[id$="-direction"]');
  if (!currentSelect) {
    console.error('No select element found in active form');
    return;
  }

  // –ù–∞—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryList = document.querySelector('#category-sheet .category-list');
  if (!categoryList) {
    console.error('No category list found');
    return;
  }

  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  categoryList.innerHTML = '';

 // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–º–∏—Å—è optgroup
Array.from(currentSelect.children).forEach(child => {
  if (child.tagName === 'OPTGROUP') {
    const wrapper = document.createElement('div');
    wrapper.className = 'optgroup-wrapper';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
    const groupLabel = document.createElement('div');
    groupLabel.className = 'category-group-label dropdown-toggle';
    groupLabel.textContent = `‚ñ∂ ${child.label}`;
    wrapper.appendChild(groupLabel);

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–ø—Ü–∏–π
    const optionsContainer = document.createElement('div');
    optionsContainer.className = 'group-options hidden';

    // –î–æ–±–∞–≤–ª—è–µ–º option –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    Array.from(child.children).forEach(option => {
      if (!option.value) return;
      const li = document.createElement('li');
      li.className = 'category-item';
      li.textContent = option.text;
      li.addEventListener('click', () => {
        currentSelect.value = option.value;

        const button = activeForm.querySelector('.category-select-button');
        if (button) button.textContent = option.text;

        const hiddenInput = activeForm.querySelector('input[type="hidden"][name="category"]');
        if (hiddenInput) hiddenInput.value = option.value;

        document.getElementById('category-sheet').classList.add('hidden');
      });
      optionsContainer.appendChild(li);
    });

    // –ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É ‚Äî —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç
    groupLabel.addEventListener('click', () => {
      const isHidden = optionsContainer.classList.contains('hidden');
      optionsContainer.classList.toggle('hidden', !isHidden);
      groupLabel.textContent = `${isHidden ? '‚ñº' : '‚ñ∂'} ${child.label}`;
    });

    wrapper.appendChild(optionsContainer);
    categoryList.appendChild(wrapper);

  } else if (child.tagName === 'OPTION' && child.value) {
    const li = document.createElement('li');
    li.className = 'category-item';
    li.textContent = child.text;
    li.addEventListener('click', () => {
      currentSelect.value = child.value;

      const button = activeForm.querySelector('.category-select-button');
      if (button) button.textContent = child.text;

      const hiddenInput = activeForm.querySelector('input[type="hidden"][name="category"]');
      if (hiddenInput) hiddenInput.value = child.value;

      document.getElementById('category-sheet').classList.add('hidden');
    });
    categoryList.appendChild(li);
  }
});


  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º backdrop –∏ bottom-sheet —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  const backdrop = document.getElementById('bottom-sheet-backdrop');
  const categorySheet = document.getElementById('category-sheet');
  
  if (backdrop && categorySheet) {
    backdrop.classList.remove('hidden');
    categorySheet.classList.remove('hidden');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º z-index –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    backdrop.style.zIndex = '1099';
    currentSheet.style.zIndex = '1100';
    categorySheet.style.zIndex = '1101';
  } else {
    console.error('Backdrop or category sheet not found');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è bottom-sheet —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
const closeButton = document.querySelector('.close-category-sheet');
if (closeButton) {
  closeButton.addEventListener('click', () => {
    const categorySheet = document.getElementById('category-sheet');
    if (categorySheet) categorySheet.classList.add('hidden');
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function initializeCategoryButtons() {
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ select —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
  const categorySelects = document.querySelectorAll('select[id$="-category"], select[id$="-status"]');
  
  categorySelects.forEach(select => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ select
    if (select.previousElementSibling && select.previousElementSibling.classList.contains('category-select-container')) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const container = document.createElement('div');
    container.className = 'category-select-container';

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    const button = document.createElement('button');
    button.type = 'button';
    button.className = 'category-select-button';
    button.textContent = select.options[select.selectedIndex]?.text || '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é';

    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π input –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    const hiddenInput = document.createElement('input');
    hiddenInput.type = 'hidden';
    hiddenInput.name = 'category';
    hiddenInput.value = select.value;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
    button.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π bottom-sheet
      const currentSheet = select.closest('.bottom-sheet');
      if (currentSheet && !currentSheet.classList.contains('hidden')) {
        openCategorySheet(currentSheet);
      } else {
        console.error('No visible bottom sheet found');
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.appendChild(button);
    container.appendChild(hiddenInput);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ select
    select.parentNode.insertBefore(container, select);

    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π select
    select.style.display = 'none';
  });
}


