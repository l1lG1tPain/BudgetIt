import { APP_VERSION } from '../../constants/constants.js';

(function () {
  console.log('[Analytics] –ó–∞–ø—É—Å–∫ analytics.js');

  const userIdKey = 'budgetit-user-id';
  const firstVisitKey = 'first-visit-date';

  // ‚úÖ userId —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
  let userId = localStorage.getItem(userIdKey);
  if (!userId) {
    const idCore = Math.random().toString(36).substring(2, 8);
    const emojis = [
    // üåä –ú–æ—Ä—Å–∫–∏–µ
    'ü¶à', 'üê¨', 'üêô', 'üê¢', 'üê†', 'üê≥', 'ü¶≠', 'ü™∏',

    // üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ
    'üíº', 'üí∏', 'üìä', 'üßæ', 'ü™ô', 'üîê', 'üí∞', 'üè¶', 'üßÆ',

    // ü§ñ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ
    'ü§ñ', 'üì±', 'üîã', 'üíæ', 'üßä', 'üõ∞Ô∏è', 'üß¨', 'üñ•Ô∏è', 'üì°',

    // üåø –°–ø–æ–∫–æ–π–Ω—ã–µ
    'üïäÔ∏è', 'üåø', 'üêß', 'üåô', 'üçÉ', '‚òÅÔ∏è', 'üïØÔ∏è', 'üßò‚Äç‚ôÇÔ∏è', 'ü™∑',

    // üî• –ê–∫—Ç–∏–≤–Ω—ã–µ
    'üî•', 'üéØ', 'üöÄ', 'üé©', 'üí£', 'üå™Ô∏è', 'üèÜ', 'üí™', 'üèÉ‚Äç‚ôÇÔ∏è',

    // üê∏ –ú–µ–º–Ω—ã–µ
    'üê∏', 'üê∑', 'üç©', 'üßÉ', 'ü¶Ñ', 'üçï', 'üßå', 'ü¶ë', 'ü§°', 'üßü‚Äç‚ôÇÔ∏è',

    // üßô‚Äç‚ôÇÔ∏è –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ (–≤—Å—Ç—Ä–æ–µ–Ω—ã)
    'üßô‚Äç‚ôÇÔ∏è', 'üêâ', 'üëë', 'üßõ‚Äç‚ôÇÔ∏è', 'ü¶∏‚Äç‚ôÇÔ∏è', 'üßù‚Äç‚ôÇÔ∏è', 'üßû‚Äç‚ôÇÔ∏è', 'üßú‚Äç‚ôÇÔ∏è', 'ü¶Ö', 'üßô‚Äç‚ôÄÔ∏è'
    ];

    const isMyDevice = navigator.userAgent.includes('S918B');
    const isFlagSet = localStorage.getItem('i-am-akulka') === 'yes';
    const isMe = isMyDevice || isFlagSet;

    const emoji = isMe ? 'ü¶à' : emojis[Math.floor(Math.random() * emojis.length)];
    userId = `${emoji}${idCore}`;
    localStorage.setItem(userIdKey, userId);
  }

  // ‚úÖ firstVisit
  let firstVisit = localStorage.getItem(firstVisitKey);
  if (!firstVisit) {
    firstVisit = new Date().toISOString().slice(0, 10);
    localStorage.setItem(firstVisitKey, firstVisit);
  }

  const retentionDays = Math.floor(
    (Date.now() - new Date(firstVisit).getTime()) / (1000 * 60 * 60 * 24)
  );

  const budgetsRaw = localStorage.getItem('budgets');
  let budgetNames = [];
  let totalTx = 0;
  let debtCount = 0;
  let txTypeCounts = {};

  try {
    const parsed = JSON.parse(budgetsRaw || '[]');
    if (Array.isArray(parsed)) {
      budgetNames = parsed.map(b => b.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
      for (const budget of parsed) {
        for (const tx of (budget.transactions || [])) {
          totalTx++;
          const type = tx.type || 'unknown';
          txTypeCounts[type] = (txTypeCounts[type] || 0) + 1;
          if (type === 'debt') debtCount++;
        }
      }
    }
  } catch (e) {
    console.warn('[Analytics] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ budgets');
  }

  const mostUsedType = Object.entries(txTypeCounts)
    .sort((a, b) => b[1] - a[1])[0]?.[0] || null;

  const data = {
    tag: 'session',
    version: APP_VERSION || 'unknown',
    id: userId, // üëà —á–∏—Ç–∞–µ–º—ã–π id
    budgets: budgetNames.join(', '),
    budgetCount: budgetNames.length,
    totalTx,
    debtRatio: totalTx > 0 ? +(debtCount / totalTx).toFixed(3) : 0,
    mostUsedType,
    retentionDays
  };

  console.log('[Analytics] id:', userId);
  console.log('[Analytics] –î–∞–Ω–Ω—ã–µ identify:', data);

  if (typeof umami?.identify === 'function') {
    umami.identify(userId, data);
  }

  if (typeof window.trackSafe === 'function') {
    trackSafe('session-start', data);
  }

  // üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
  window.budgetItUserId = userId;
})();
