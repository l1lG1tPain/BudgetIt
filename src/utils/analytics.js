import { APP_VERSION } from '../../constants/constants.js';

(function () {
  try {
    console.log('[Analytics] –ó–∞–ø—É—Å–∫ analytics.js');

    const userIdKey     = 'budgetit-user-id';
    const firstVisitKey = 'first-visit-date';

    /* ---------- 1. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—É–ª —ç–º–æ–¥–∑–∏ ---------- */

    const marine = [ 'ü¶à','üê¨','üêô','üê¢','üê†','üê≥','ü¶≠','ü™∏','üê°','ü¶û','ü¶Ä','ü¶ê','üêü','üêã','ü™º','üõ•Ô∏è','üåä' ];
    const financial = [ 'üíº','üí∏','üìä','üßæ','ü™ô','üîê','üí∞','üè¶','üßÆ','üí≥','üíµ','üí∂','üí∑','üí¥','üèß','üìà','üìâ','ü™ô' ];
    const tech = [ 'ü§ñ','üì±','üîã','üíæ','üßä','üõ∞Ô∏è','üß¨','üñ•Ô∏è','üì°','üñ±Ô∏è','üñ®Ô∏è','üéß','üíø','üìÄ','üßë‚Äçüíª','üîå','ü™´','ü™õ' ];
    const calm = [ 'üïäÔ∏è','üåø','üêß','üåô','üçÉ','‚òÅÔ∏è','üïØÔ∏è','üßò‚Äç‚ôÇÔ∏è','ü™∑','üåÖ','üå∏','üå∫','üåÑ','üåª','ü™π','üåû','üõ∂','ü´ñ' ];
    const active = [ 'üî•','üéØ','üöÄ','üé©','üí£','üå™Ô∏è','üèÜ','üí™','üèÉ‚Äç‚ôÇÔ∏è','ü•á','üí•','‚õπÔ∏è‚Äç‚ôÇÔ∏è','ü§∏‚Äç‚ôÇÔ∏è','‚õ∑Ô∏è','üèÑ‚Äç‚ôÇÔ∏è','üö¥‚Äç‚ôÇÔ∏è','üèπ','ü•ä' ];
    const meme = [ 'üê∏','üê∑','üç©','üßÉ','ü¶Ñ','üçï','üßå','ü¶ë','ü§°','üßü‚Äç‚ôÇÔ∏è','üòÇ','üí©','üòé','ü´†','ü§ì','üôÉ','üëÄ','üê∂','üê±','ü§Ø' ];
    const legendary = [ 'üßô‚Äç‚ôÇÔ∏è','üêâ','üëë','üßõ‚Äç‚ôÇÔ∏è','ü¶∏‚Äç‚ôÇÔ∏è','üßù‚Äç‚ôÇÔ∏è','üßû‚Äç‚ôÇÔ∏è','üßú‚Äç‚ôÇÔ∏è','ü¶Ö','üßô‚Äç‚ôÄÔ∏è' ];

    const emojis = [...marine, ...financial, ...tech, ...calm, ...active, ...meme, ...legendary];

    /* ---------- 2. userId —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π ---------- */

    let userId = localStorage.getItem(userIdKey);
    if (!userId) {
      const idCore = Math.random().toString(36).substring(2, 8);
      const isMyDevice = navigator.userAgent.includes('SM-S918B/DS');
      const isFlagSet  = localStorage.getItem('i-am-akulka') === 'yes';
      const isMe       = isMyDevice || isFlagSet;

      const emoji = isMe ? 'ü¶à' : emojis[Math.floor(Math.random() * emojis.length)];
      userId = `${emoji}${idCore}`;
      localStorage.setItem(userIdKey, userId);
    }

    window.budgetItUserId = userId;

    /* ---------- 3. –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞ ---------- */

    let firstVisit = localStorage.getItem(firstVisitKey);
    if (!firstVisit) {
      firstVisit = new Date().toISOString().slice(0, 10);
      localStorage.setItem(firstVisitKey, firstVisit);
    }

    const retentionDays = Math.floor(
      (Date.now() - new Date(firstVisit).getTime()) / 86_400_000
    );

    /* ---------- 4. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –±—é–¥–∂–µ—Ç–∞—Ö ---------- */

    const budgetsRaw = localStorage.getItem('budgets');
    let budgetNames = [];
    let totalTx = 0;
    let debtCount = 0;
    let txTypeCounts = {};

    try {
      const parsed = JSON.parse(budgetsRaw || '[]');
      if (Array.isArray(parsed)) {
        budgetNames = parsed.map(b => b.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
        for (const budget of parsed) {
          for (const tx of (budget.transactions || [])) {
            totalTx++;
            const type = tx.type || 'unknown';
            txTypeCounts[type] = (txTypeCounts[type] || 0) + 1;
            if (type === 'debt') debtCount++;
          }
        }
      }
    } catch (e) {
      console.warn('[Analytics] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ budgets:', e);
    }

    const mostUsedType = Object.entries(txTypeCounts)
      .sort((a, b) => b[1] - a[1])[0]?.[0] || null;

    /* ---------- 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ payload ---------- */

    const data = {
      tag: 'session',
      version: APP_VERSION || 'unknown',
      id: userId,
      budgets: budgetNames.join(', '),
      budgetCount: budgetNames.length,
      totalTx,
      debtRatio: totalTx ? +(debtCount / totalTx).toFixed(3) : 0,
      mostUsedType,
      retentionDays
    };

    console.log('[Analytics] id:', userId);
    console.log('[Analytics] –î–∞–Ω–Ω—ã–µ identify:', data);

    /* ---------- 6. –û—Ç–ø—Ä–∞–≤–∫–∞ ---------- */

    try {
      if (typeof umami !== 'undefined' && typeof umami.identify === 'function') {
        umami.identify(userId, data);
        console.log('[Analytics] identify –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      } else {
        console.warn('[Analytics] umami.identify –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (err) {
      console.warn('[Analytics] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ identify:', err);
    }

    try {
      if (typeof window.trackSafe === 'function') {
        window.trackSafe('session-start', data);
      }
    } catch (err) {
      console.warn('[Analytics] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ trackSafe:', err);
    }

  } catch (err) {
    console.error('[Analytics] –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–±–æ–π:', err);
  }
})();
